//@version=5
indicator(title="DeQuex Algo", shorttitle="DeQuex Algo", overlay=true)

// Indicator Inputs
timeframe = input.timeframe("",  "Indicator TimeFrame")
fastLength = input.int(title="Fast Sensitivity", defval=20)
slowLength = input.int(title="Slow Sensitivity", defval=50)
src = input.source(title="Source", defval=close)
signalLength = input.int(title="Signal Smoothing", minval = 2, maxval = 50, defval = 10, tooltip = "Recommended values: Short: 10, Mid-term: 14, Long-term: 32")
maSource = input.string(title="Oscillator MA Type", defval="EMA", options=["SMA", "EMA"])
maSignal = input.string(title="Signal MA Type", defval="EMA", options=["SMA", "EMA"])

// Define input variables
trail_length = input.int(title="Trail Length", defval=22)
multiplier = input.float(title="Multiplier", defval=0.0)

// Display Options
showDots = input.bool(true, title = "Show Signals", group="Signal Settings")
showTrend = input.bool(true, title = "Show Signals by Trend Color", group="Signal Settings")
showHighlightBars = input.bool(true, title="Show Highlight Price Bars", group="Signal Settings")
//showTrail = input.bool(true, title = "Show Trail", group="Signal Settings")
signalFilter = input.bool(false, title = "Filter Signals by Support/Resistance", group="Signal Settings")
// Parameters for the shooting star and hammer
bodyMultiplier = input.float(title="Exit Agility", defval=1.3, step = 0.1, minval = 1, maxval = 10)
length = input.int(title="Exit Volume Length", defval = 14, minval = 7, maxval = 200, step = 1) 

// MACD Line Colors
macdColor = input.color(#FF6D00, "Signal Color  ",  group="Color Settings")
trendUpColor = input.color(#00DB0A, "Trend Up          ",  group="Color Settings")
trendDownColor = input.color(#FF0000, "Trend Down   ",  group="Color Settings")
trendChangeColor = input.color(#56328F, "Trend Change  ",  group="Color Settings")

// Alert Options
alertLong = input.bool(true, title = "DeQuex Algo Buy", group = "Alerts")
alertLongExit = input.bool(true, title = "DeQuex Algo Buy Exit", group = "Alerts")
alertShort = input.bool(true, title = "DeQuex Algo Sell", group = "Alerts")
alertShortExit = input.bool(true, title = "DeQuex Algo Sell Exit", group = "Alerts")

// Calculate Moving Averages
fastMAFunction = maSource == "SMA" ? ta.sma(src, fastLength) : ta.ema(src, fastLength)
slowMAFunction = maSource == "SMA" ? ta.sma(src, slowLength) : ta.ema(src, slowLength)

fastMA = request.security(syminfo.tickerid, timeframe, fastMAFunction)
slowMA = request.security(syminfo.tickerid, timeframe, slowMAFunction)

// Calculate volume moving average
volumeAvg = ta.sma(volume, length)

// Calculate body and shadow sizes
bodySize = math.abs(close - open)
upperShadowSize = high - math.max(close, open)
lowerShadowSize = math.min(close, open) - low
isHighVolume = volume > volumeAvg

// Define conditions for shooting star and hammer
bullishCondition = close[1] > open[1] and bodySize < upperShadowSize / bodyMultiplier and lowerShadowSize <= bodySize / bodyMultiplier
bearishCondition = close[1] < open[1] and bodySize < lowerShadowSize / bodyMultiplier and upperShadowSize <= bodySize / bodyMultiplier

// Detect shooting star and hammer
isShootingStar = bullishCondition and isHighVolume
isHammer = bearishCondition and isHighVolume

// Calculate MACD Line
macd = fastMA - slowMA

// Calculate Signal Line
signal = request.security(syminfo.tickerid, timeframe, maSignal == "SMA" ? ta.sma(macd, signalLength) : ta.ema(macd, signalLength))

// Calculate Histogram
hist = macd - signal

// Determine MACD Trend
trendUp = macd > signal
trendDown = macd < signal

// Determine MACD Cross Up/Down
cross_UP   = signal[1] >= macd[1] and signal < macd
cross_DN   = signal[1] <= macd[1] and signal > macd
cross_UP_A = (signal[1] >= macd[1] and signal < macd) and macd > 0
cross_DN_B = (signal[1] <= macd[1] and signal > macd) and macd < 0

// Condition that changes Color of MACD Line if Show Trend is turned on..
trendColor = showTrend and trendUp ? trendUpColor : trendUp ? macdColor : showTrend  and trendDown ? trendDownColor: trendDown ? macdColor : na 

lengthInput = 14

rsih(length) =>
    var float PIx2 = 2 * math.pi
    // Accumulate "Closes Up" and "Closes Down"
    cu = 0.0
    cd = 0.0
    for count = 1 to length
    	change = close[count] - close[count - 1]
    	absChange = math.abs(change)
    	cosPart = math.cos(PIx2 * count / (length + 1))
    
    	if change < 0
    		cu := cu + (1 - cosPart) * absChange
    	else if change > 0
    		cd := cd + (1 - cosPart) * absChange

    result = nz((cu - cd) / (cu + cd))

rsisignal = rsih(lengthInput)
plotColor = rsisignal > 0.0 ? #00FF00  : #FF0080

//Var Statements for Histogram Color Change
var bool histA_IsUp = false
var bool histA_IsDown = false
var bool histB_IsDown = false
var bool histB_IsUp = false
histA_IsUp   := hist == hist[1] ? histA_IsUp[1] : hist > hist[1] and hist > 0
histA_IsDown := hist == hist[1] ? histA_IsDown[1] : hist < hist[1] and hist > 0
histB_IsDown := hist == hist[1] ? histB_IsDown[1] : hist < hist[1] and hist <= 0
histB_IsUp   := hist == hist[1] ? histB_IsUp[1] : hist > hist[1] and hist <= 0


hist_col =  histA_IsUp ? trendUpColor : histA_IsDown ? trendChangeColor : histB_IsDown ? trendDownColor : histB_IsUp ? trendChangeColor : trendChangeColor

// Plot Statement
//Background Color
//bgcolor(showBackground and cross_UP ? trendUpColor : na, editable=false)
//bgcolor(showBackground and cross_DN ? trendDownColor : na, editable=false)
//Highlight Price Bars
barcolor(showHighlightBars ? hist_col : na, title="Trend", offset = 0, editable=false) //test
//barcolor(show_HB and trend_up ? col_trnd_Up : na, title="Trend Up", offset = 0, editable=false)
//barcolor(show_HB and trend_dn ? col_trnd_Dn : na, title="Trend Dn", offset = 0, editable=false)

//plotshape(show_dots and rsisignal > 0.0 and cross_UP, title="RsiDots", color=color.new(plotColor ,0), style=shape.triangleup, editable=false, location=location.belowbar, size=size.tiny, text="Rsi", textcolor=color.white)


// Calculate the dynamic support and resistance levels
basis = hlc3
dev = multiplier * ta.stdev(basis, trail_length)
upper = basis + dev
lower = basis - dev
resistance = ta.ema(upper, trail_length)
support = ta.ema(lower, trail_length)

// Calculate the volume trend using OBV
obv_trend = ta.obv > ta.ema(ta.obv, trail_length) ? 1 : -1

// Calculate the half deviation value once
half_dev = dev / 2

// Calculate the trail resistance and support levels based on the volume trend
trail_resistance = obv_trend > 0 ? resistance : resistance - half_dev
trail_support = obv_trend > 0 ? support + half_dev : support

exitBuy = isShootingStar and trendUp
exitSell = isHammer and trendDown

plotshape(showDots and (cross_UP ? macd : na) and (rsisignal > 0.0) and (not signalFilter or close > trail_support), title="Strong Buy", color=color.new(trendColor ,0), style=shape.triangleup, editable=true, location=location.belowbar, size=size.small, text="Strong", textcolor=color.white)
plotshape(showDots and (cross_DN ? macd : na) and (rsisignal < 0.0) and (not signalFilter or close < trail_resistance), title="Strong Sell", color=color.new(trendColor ,0), style=shape.triangledown, editable=true, location=location.abovebar, size=size.small, text="Strong", textcolor=color.white)

plotshape(showDots and (cross_UP ? macd : na) and (rsisignal <= 0.0) and (not signalFilter or close > trail_support), title="Buy", color=color.new(trendColor ,0), style=shape.triangleup, editable=true, location=location.belowbar, size=size.tiny, text="Buy", textcolor=color.white)
plotshape(showDots and (cross_DN ? macd : na) and (rsisignal >= 0.0) and (not signalFilter or close < trail_resistance), title="Sell", color=color.new(trendColor ,0), style=shape.triangledown, editable=true, location=location.abovebar, size=size.tiny, text="Sell", textcolor=color.white)

// Show exit signals
plotshape(showDots and exitBuy and (not signalFilter or close > trail_support), title="Exit Buy", color=color.blue, style=shape.xcross, editable=true, location=location.abovebar, size=size.tiny)
plotshape(showDots and exitSell and (not signalFilter or close < trail_resistance), title="Exit Sell", color=color.red, style=shape.xcross, editable=true, location=location.belowbar, size=size.tiny)


// Plot the dynamic support and resistance levels
above_support = close > trail_support

plot(above_support ? trail_support : trail_resistance, color=above_support ? color.green : color.red, title="Support/Resistance")

// function to generate alert message
alertMessage(msg) =>
    "Symbol = (" + syminfo.tickerid + ") TimeFrame = (" + timeframe.period + ") Current Price (" + str.tostring(close) + ") DeQuex Algo " + msg

//Alerts
if alertLong and cross_UP
    alert(alertMessage("Buy"), alert.freq_once_per_bar_close)

if alertLongExit and exitBuy
    alert(alertMessage("Buy Exit"), alert.freq_once_per_bar_close)

if alertShort and cross_DN
    alert(alertMessage("Sell"), alert.freq_once_per_bar_close)

if alertShortExit and exitSell
    alert(alertMessage("Sell Exit"), alert.freq_once_per_bar_close)
